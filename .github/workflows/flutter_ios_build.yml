name: Flutter iOS Build

on:
  push:
    branches:
      - dev
      - staging
      - main

jobs:
  build:
    runs-on: macos-latest

    environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'staging' && 'stag' || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment Variables
        id: set-env
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "FLAVOR=prod" >> $GITHUB_ENV
            echo "MOBILEPROVISION_BASE64=${{ secrets.MOBILEPROVISION_BASE64_PROD }}" >> $GITHUB_ENV
            echo "APPSTORE_EXPORT=${{ secrets.APPSTORE_EXPORT_PROD }}" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "staging" ]; then
            echo "FLAVOR=stag" >> $GITHUB_ENV
            echo "MOBILEPROVISION_BASE64=${{ secrets.MOBILEPROVISION_BASE64_STAG }}" >> $GITHUB_ENV
            echo "APPSTORE_EXPORT=${{ secrets.APPSTORE_EXPORT_STAG }}" >> $GITHUB_ENV
          else
            echo "FLAVOR=dev" >> $GITHUB_ENV
            echo "MOBILEPROVISION_BASE64=${{ secrets.MOBILEPROVISION_BASE64_DEV }}" >> $GITHUB_ENV
            echo "APPSTORE_EXPORT=${{ secrets.APPSTORE_EXPORT_DEV }}" >> $GITHUB_ENV
          fi

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPSTORE_CERT_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPSTORE_CERT_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ env.MOBILEPROVISION_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          EXPORT_OPTION: ${{ env.APPSTORE_EXPORT }}
          APPSTORE_API_PRIVATE_KEY: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          EXPORT_OPTION_PATH=$RUNNER_TEMP/ExportOptions.plist
          PRIVATE_KEY_ID_P8=$RUNNER_TEMP/AuthKey_NTFGJ8X8FN.p8
          
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          echo -n "$EXPORT_OPTION" | base64 --decode --output $EXPORT_OPTION_PATH
          echo -n "$APPSTORE_API_PRIVATE_KEY" | base64 --decode --output $PRIVATE_KEY_ID_P8
          echo $PRIVATE_KEY_ID_P8
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Storing .p8 File
          mkdir -p ~/private_keys; cp $PRIVATE_KEY_ID_P8 ~/private_keys

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: '3.22.0'

      - name: Display Flutter Version
        run: flutter --version

      - name: Get dependencies
        run: flutter pub get

      - name: Building IPA
        run: flutter build ipa --flavor $FLAVOR --release --export-options-plist=$RUNNER_TEMP/ExportOptions.plist

      - name: 'Upload IPA to App Store'
        run: xcrun altool --upload-app --type ios -f build/ios/ipa/Purpus.ipa --apiKey ${{ secrets.APPSTORE_API_KEY_ID }} --apiIssuer ${{ secrets.APPSTORE_ISSUER_ID }}

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
